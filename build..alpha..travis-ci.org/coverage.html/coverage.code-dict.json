{"/home/travis/build/npmtest/node-npmtest-tar/test.js":"/* istanbul instrument in package npmtest_tar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tar/lib.npmtest_tar.js":"/* istanbul instrument in package npmtest_tar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tar = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tar = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tar/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tar && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tar\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tar.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tar.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tar.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tar.__dirname + '/lib.npmtest_tar.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/tar.js":"// field paths that every tar file must have.\n// header is padded to 512 bytes.\nvar f = 0\n  , fields = {}\n  , path = fields.path = f++\n  , mode = fields.mode = f++\n  , uid = fields.uid = f++\n  , gid = fields.gid = f++\n  , size = fields.size = f++\n  , mtime = fields.mtime = f++\n  , cksum = fields.cksum = f++\n  , type = fields.type = f++\n  , linkpath = fields.linkpath = f++\n  , headerSize = 512\n  , blockSize = 512\n  , fieldSize = []\n\nfieldSize[path] = 100\nfieldSize[mode] = 8\nfieldSize[uid] = 8\nfieldSize[gid] = 8\nfieldSize[size] = 12\nfieldSize[mtime] = 12\nfieldSize[cksum] = 8\nfieldSize[type] = 1\nfieldSize[linkpath] = 100\n\n// \"ustar\\0\" may introduce another bunch of headers.\n// these are optional, and will be nulled out if not present.\n\nvar ustar = fields.ustar = f++\n  , ustarver = fields.ustarver = f++\n  , uname = fields.uname = f++\n  , gname = fields.gname = f++\n  , devmaj = fields.devmaj = f++\n  , devmin = fields.devmin = f++\n  , prefix = fields.prefix = f++\n  , fill = fields.fill = f++\n\n// terminate fields.\nfields[f] = null\n\nfieldSize[ustar] = 6\nfieldSize[ustarver] = 2\nfieldSize[uname] = 32\nfieldSize[gname] = 32\nfieldSize[devmaj] = 8\nfieldSize[devmin] = 8\nfieldSize[prefix] = 155\nfieldSize[fill] = 12\n\n// nb: prefix field may in fact be 130 bytes of prefix,\n// a null char, 12 bytes for atime, 12 bytes for ctime.\n//\n// To recognize this format:\n// 1. prefix[130] === ' ' or '\\0'\n// 2. atime and ctime are octal numeric values\n// 3. atime and ctime have ' ' in their last byte\n\nvar fieldEnds = {}\n  , fieldOffs = {}\n  , fe = 0\nfor (var i = 0; i < f; i ++) {\n  fieldOffs[i] = fe\n  fieldEnds[i] = (fe += fieldSize[i])\n}\n\n// build a translation table of field paths.\nObject.keys(fields).forEach(function (f) {\n  if (fields[f] !== null) fields[fields[f]] = f\n})\n\n// different values of the 'type' field\n// paths match the values of Stats.isX() functions, where appropriate\nvar types =\n  { 0: \"File\"\n  , \"\\0\": \"OldFile\" // like 0\n  , \"\": \"OldFile\"\n  , 1: \"Link\"\n  , 2: \"SymbolicLink\"\n  , 3: \"CharacterDevice\"\n  , 4: \"BlockDevice\"\n  , 5: \"Directory\"\n  , 6: \"FIFO\"\n  , 7: \"ContiguousFile\" // like 0\n  // posix headers\n  , g: \"GlobalExtendedHeader\" // k=v for the rest of the archive\n  , x: \"ExtendedHeader\" // k=v for the next file\n  // vendor-specific stuff\n  , A: \"SolarisACL\" // skip\n  , D: \"GNUDumpDir\" // like 5, but with data, which should be skipped\n  , I: \"Inode\" // metadata only, skip\n  , K: \"NextFileHasLongLinkpath\" // data = link path of next file\n  , L: \"NextFileHasLongPath\" // data = path of next file\n  , M: \"ContinuationFile\" // skip\n  , N: \"OldGnuLongPath\" // like L\n  , S: \"SparseFile\" // skip\n  , V: \"TapeVolumeHeader\" // skip\n  , X: \"OldExtendedHeader\" // like x\n  }\n\nObject.keys(types).forEach(function (t) {\n  types[types[t]] = types[types[t]] || t\n})\n\n// values for the mode field\nvar modes =\n  { suid: 04000 // set uid on extraction\n  , sgid: 02000 // set gid on extraction\n  , svtx: 01000 // set restricted deletion flag on dirs on extraction\n  , uread:  0400\n  , uwrite: 0200\n  , uexec:  0100\n  , gread:  040\n  , gwrite: 020\n  , gexec:  010\n  , oread:  4\n  , owrite: 2\n  , oexec:  1\n  , all: 07777\n  }\n\nvar numeric =\n  { mode: true\n  , uid: true\n  , gid: true\n  , size: true\n  , mtime: true\n  , devmaj: true\n  , devmin: true\n  , cksum: true\n  , atime: true\n  , ctime: true\n  , dev: true\n  , ino: true\n  , nlink: true\n  }\n\nObject.keys(modes).forEach(function (t) {\n  modes[modes[t]] = modes[modes[t]] || t\n})\n\nvar knownExtended =\n  { atime: true\n  , charset: true\n  , comment: true\n  , ctime: true\n  , gid: true\n  , gname: true\n  , linkpath: true\n  , mtime: true\n  , path: true\n  , realtime: true\n  , security: true\n  , size: true\n  , uid: true\n  , uname: true }\n\n\nexports.fields = fields\nexports.fieldSize = fieldSize\nexports.fieldOffs = fieldOffs\nexports.fieldEnds = fieldEnds\nexports.types = types\nexports.modes = modes\nexports.numeric = numeric\nexports.headerSize = headerSize\nexports.blockSize = blockSize\nexports.knownExtended = knownExtended\n\nexports.Pack = require(\"./lib/pack.js\")\nexports.Parse = require(\"./lib/parse.js\")\nexports.Extract = require(\"./lib/extract.js\")\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/pack.js":"// pipe in an fstream, and it'll make a tarball.\n// key-value pair argument is global extended header props.\n\nmodule.exports = Pack\n\nvar EntryWriter = require(\"./entry-writer.js\")\n  , Stream = require(\"stream\").Stream\n  , path = require(\"path\")\n  , inherits = require(\"inherits\")\n  , GlobalHeaderWriter = require(\"./global-header-writer.js\")\n  , collect = require(\"fstream\").collect\n  , eof = new Buffer(512)\n\nfor (var i = 0; i < 512; i ++) eof[i] = 0\n\ninherits(Pack, Stream)\n\nfunction Pack (props) {\n  // console.error(\"-- p ctor\")\n  var me = this\n  if (!(me instanceof Pack)) return new Pack(props)\n\n  if (props) me._noProprietary = props.noProprietary\n  else me._noProprietary = false\n\n  me._global = props\n\n  me.readable = true\n  me.writable = true\n  me._buffer = []\n  // console.error(\"-- -- set current to null in ctor\")\n  me._currentEntry = null\n  me._processing = false\n\n  me._pipeRoot = null\n  me.on(\"pipe\", function (src) {\n    if (src.root === me._pipeRoot) return\n    me._pipeRoot = src\n    src.on(\"end\", function () {\n      me._pipeRoot = null\n    })\n    me.add(src)\n  })\n}\n\nPack.prototype.addGlobal = function (props) {\n  // console.error(\"-- p addGlobal\")\n  if (this._didGlobal) return\n  this._didGlobal = true\n\n  var me = this\n  GlobalHeaderWriter(props)\n    .on(\"data\", function (c) {\n      me.emit(\"data\", c)\n    })\n    .end()\n}\n\nPack.prototype.add = function (stream) {\n  if (this._global && !this._didGlobal) this.addGlobal(this._global)\n\n  if (this._ended) return this.emit(\"error\", new Error(\"add after end\"))\n\n  collect(stream)\n  this._buffer.push(stream)\n  this._process()\n  this._needDrain = this._buffer.length > 0\n  return !this._needDrain\n}\n\nPack.prototype.pause = function () {\n  this._paused = true\n  if (this._currentEntry) this._currentEntry.pause()\n  this.emit(\"pause\")\n}\n\nPack.prototype.resume = function () {\n  this._paused = false\n  if (this._currentEntry) this._currentEntry.resume()\n  this.emit(\"resume\")\n  this._process()\n}\n\nPack.prototype.end = function () {\n  this._ended = true\n  this._buffer.push(eof)\n  this._process()\n}\n\nPack.prototype._process = function () {\n  var me = this\n  if (me._paused || me._processing) {\n    return\n  }\n\n  var entry = me._buffer.shift()\n\n  if (!entry) {\n    if (me._needDrain) {\n      me.emit(\"drain\")\n    }\n    return\n  }\n\n  if (entry.ready === false) {\n    // console.error(\"-- entry is not ready\", entry)\n    me._buffer.unshift(entry)\n    entry.on(\"ready\", function () {\n      // console.error(\"-- -- ready!\", entry)\n      me._process()\n    })\n    return\n  }\n\n  me._processing = true\n\n  if (entry === eof) {\n    // need 2 ending null blocks.\n    me.emit(\"data\", eof)\n    me.emit(\"data\", eof)\n    me.emit(\"end\")\n    me.emit(\"close\")\n    return\n  }\n\n  // Change the path to be relative to the root dir that was\n  // added to the tarball.\n  //\n  // XXX This should be more like how -C works, so you can\n  // explicitly set a root dir, and also explicitly set a pathname\n  // in the tarball to use.  That way we can skip a lot of extra\n  // work when resolving symlinks for bundled dependencies in npm.\n\n  var root = path.dirname((entry.root || entry).path);\n  if (me._global && me._global.fromBase && entry.root && entry.root.path) {\n    // user set 'fromBase: true' indicating tar root should be directory itself\n    root = entry.root.path;\n  }\n\n  var wprops = {}\n\n  Object.keys(entry.props || {}).forEach(function (k) {\n    wprops[k] = entry.props[k]\n  })\n\n  if (me._noProprietary) wprops.noProprietary = true\n\n  wprops.path = path.relative(root, entry.path || '')\n\n  // actually not a matter of opinion or taste.\n  if (process.platform === \"win32\") {\n    wprops.path = wprops.path.replace(/\\\\/g, \"/\")\n  }\n\n  if (!wprops.type)\n    wprops.type = 'Directory'\n\n  switch (wprops.type) {\n    // sockets not supported\n    case \"Socket\":\n      return\n\n    case \"Directory\":\n      wprops.path += \"/\"\n      wprops.size = 0\n      break\n\n    case \"Link\":\n      var lp = path.resolve(path.dirname(entry.path), entry.linkpath)\n      wprops.linkpath = path.relative(root, lp) || \".\"\n      wprops.size = 0\n      break\n\n    case \"SymbolicLink\":\n      var lp = path.resolve(path.dirname(entry.path), entry.linkpath)\n      wprops.linkpath = path.relative(path.dirname(entry.path), lp) || \".\"\n      wprops.size = 0\n      break\n  }\n\n  // console.error(\"-- new writer\", wprops)\n  // if (!wprops.type) {\n  //   // console.error(\"-- no type?\", entry.constructor.name, entry)\n  // }\n\n  // console.error(\"-- -- set current to new writer\", wprops.path)\n  var writer = me._currentEntry = EntryWriter(wprops)\n\n  writer.parent = me\n\n  // writer.on(\"end\", function () {\n  //   // console.error(\"-- -- writer end\", writer.path)\n  // })\n\n  writer.on(\"data\", function (c) {\n    me.emit(\"data\", c)\n  })\n\n  writer.on(\"header\", function () {\n    Buffer.prototype.toJSON = function () {\n      return this.toString().split(/\\0/).join(\".\")\n    }\n    // console.error(\"-- -- writer header %j\", writer.props)\n    if (writer.props.size === 0) nextEntry()\n  })\n  writer.on(\"close\", nextEntry)\n\n  var ended = false\n  function nextEntry () {\n    if (ended) return\n    ended = true\n\n    // console.error(\"-- -- writer close\", writer.path)\n    // console.error(\"-- -- set current to null\", wprops.path)\n    me._currentEntry = null\n    me._processing = false\n    me._process()\n  }\n\n  writer.on(\"error\", function (er) {\n    // console.error(\"-- -- writer error\", writer.path)\n    me.emit(\"error\", er)\n  })\n\n  // if it's the root, then there's no need to add its entries,\n  // or data, since they'll be added directly.\n  if (entry === me._pipeRoot) {\n    // console.error(\"-- is the root, don't auto-add\")\n    writer.add = null\n  }\n\n  entry.pipe(writer)\n}\n\nPack.prototype.destroy = function () {}\nPack.prototype.write = function () {}\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/entry-writer.js":"module.exports = EntryWriter\n\nvar tar = require(\"../tar.js\")\n  , TarHeader = require(\"./header.js\")\n  , Entry = require(\"./entry.js\")\n  , inherits = require(\"inherits\")\n  , BlockStream = require(\"block-stream\")\n  , ExtendedHeaderWriter\n  , Stream = require(\"stream\").Stream\n  , EOF = {}\n\ninherits(EntryWriter, Stream)\n\nfunction EntryWriter (props) {\n  var me = this\n\n  if (!(me instanceof EntryWriter)) {\n    return new EntryWriter(props)\n  }\n\n  Stream.apply(this)\n\n  me.writable = true\n  me.readable = true\n\n  me._stream = new BlockStream(512)\n\n  me._stream.on(\"data\", function (c) {\n    me.emit(\"data\", c)\n  })\n\n  me._stream.on(\"drain\", function () {\n    me.emit(\"drain\")\n  })\n\n  me._stream.on(\"end\", function () {\n    me.emit(\"end\")\n    me.emit(\"close\")\n  })\n\n  me.props = props\n  if (props.type === \"Directory\") {\n    props.size = 0\n  }\n  props.ustar = \"ustar\\0\"\n  props.ustarver = \"00\"\n  me.path = props.path\n\n  me._buffer = []\n  me._didHeader = false\n  me._meta = false\n\n  me.on(\"pipe\", function () {\n    me._process()\n  })\n}\n\nEntryWriter.prototype.write = function (c) {\n  // console.error(\".. ew write\")\n  if (this._ended) return this.emit(\"error\", new Error(\"write after end\"))\n  this._buffer.push(c)\n  this._process()\n  this._needDrain = this._buffer.length > 0\n  return !this._needDrain\n}\n\nEntryWriter.prototype.end = function (c) {\n  // console.error(\".. ew end\")\n  if (c) this._buffer.push(c)\n  this._buffer.push(EOF)\n  this._ended = true\n  this._process()\n  this._needDrain = this._buffer.length > 0\n}\n\nEntryWriter.prototype.pause = function () {\n  // console.error(\".. ew pause\")\n  this._paused = true\n  this.emit(\"pause\")\n}\n\nEntryWriter.prototype.resume = function () {\n  // console.error(\".. ew resume\")\n  this._paused = false\n  this.emit(\"resume\")\n  this._process()\n}\n\nEntryWriter.prototype.add = function (entry) {\n  // console.error(\".. ew add\")\n  if (!this.parent) return this.emit(\"error\", new Error(\"no parent\"))\n\n  // make sure that the _header and such is emitted, and clear out\n  // the _currentEntry link on the parent.\n  if (!this._ended) this.end()\n\n  return this.parent.add(entry)\n}\n\nEntryWriter.prototype._header = function () {\n  // console.error(\".. ew header\")\n  if (this._didHeader) return\n  this._didHeader = true\n\n  var headerBlock = TarHeader.encode(this.props)\n\n  if (this.props.needExtended && !this._meta) {\n    var me = this\n\n    ExtendedHeaderWriter = ExtendedHeaderWriter ||\n      require(\"./extended-header-writer.js\")\n\n    ExtendedHeaderWriter(this.props)\n      .on(\"data\", function (c) {\n        me.emit(\"data\", c)\n      })\n      .on(\"error\", function (er) {\n        me.emit(\"error\", er)\n      })\n      .end()\n  }\n\n  // console.error(\".. .. ew headerBlock emitting\")\n  this.emit(\"data\", headerBlock)\n  this.emit(\"header\")\n}\n\nEntryWriter.prototype._process = function () {\n  // console.error(\".. .. ew process\")\n  if (!this._didHeader && !this._meta) {\n    this._header()\n  }\n\n  if (this._paused || this._processing) {\n    // console.error(\".. .. .. paused=%j, processing=%j\", this._paused, this._processing)\n    return\n  }\n\n  this._processing = true\n\n  var buf = this._buffer\n  for (var i = 0; i < buf.length; i ++) {\n    // console.error(\".. .. .. i=%d\", i)\n\n    var c = buf[i]\n\n    if (c === EOF) this._stream.end()\n    else this._stream.write(c)\n\n    if (this._paused) {\n      // console.error(\".. .. .. paused mid-emission\")\n      this._processing = false\n      if (i < buf.length) {\n        this._needDrain = true\n        this._buffer = buf.slice(i + 1)\n      }\n      return\n    }\n  }\n\n  // console.error(\".. .. .. emitted\")\n  this._buffer.length = 0\n  this._processing = false\n\n  // console.error(\".. .. .. emitting drain\")\n  this.emit(\"drain\")\n}\n\nEntryWriter.prototype.destroy = function () {}\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/header.js":"// parse a 512-byte header block to a data object, or vice-versa\n// If the data won't fit nicely in a simple header, then generate\n// the appropriate extended header file, and return that.\n\nmodule.exports = TarHeader\n\nvar tar = require(\"../tar.js\")\n  , fields = tar.fields\n  , fieldOffs = tar.fieldOffs\n  , fieldEnds = tar.fieldEnds\n  , fieldSize = tar.fieldSize\n  , numeric = tar.numeric\n  , assert = require(\"assert\").ok\n  , space = \" \".charCodeAt(0)\n  , slash = \"/\".charCodeAt(0)\n  , bslash = process.platform === \"win32\" ? \"\\\\\".charCodeAt(0) : null\n\nfunction TarHeader (block) {\n  if (!(this instanceof TarHeader)) return new TarHeader(block)\n  if (block) this.decode(block)\n}\n\nTarHeader.prototype =\n  { decode : decode\n  , encode: encode\n  , calcSum: calcSum\n  , checkSum: checkSum\n  }\n\nTarHeader.parseNumeric = parseNumeric\nTarHeader.encode = encode\nTarHeader.decode = decode\n\n// note that this will only do the normal ustar header, not any kind\n// of extended posix header file.  If something doesn't fit comfortably,\n// then it will set obj.needExtended = true, and set the block to\n// the closest approximation.\nfunction encode (obj) {\n  if (!obj && !(this instanceof TarHeader)) throw new Error(\n    \"encode must be called on a TarHeader, or supplied an object\")\n\n  obj = obj || this\n  var block = obj.block = new Buffer(512)\n\n  // if the object has a \"prefix\", then that's actually an extension of\n  // the path field.\n  if (obj.prefix) {\n    // console.error(\"%% header encoding, got a prefix\", obj.prefix)\n    obj.path = obj.prefix + \"/\" + obj.path\n    // console.error(\"%% header encoding, prefixed path\", obj.path)\n    obj.prefix = \"\"\n  }\n\n  obj.needExtended = false\n\n  if (obj.mode) {\n    if (typeof obj.mode === \"string\") obj.mode = parseInt(obj.mode, 8)\n    obj.mode = obj.mode & 0777\n  }\n\n  for (var f = 0; fields[f] !== null; f ++) {\n    var field = fields[f]\n      , off = fieldOffs[f]\n      , end = fieldEnds[f]\n      , ret\n\n    switch (field) {\n      case \"cksum\":\n        // special, done below, after all the others\n        break\n\n      case \"prefix\":\n        // special, this is an extension of the \"path\" field.\n        // console.error(\"%% header encoding, skip prefix later\")\n        break\n\n      case \"type\":\n        // convert from long name to a single char.\n        var type = obj.type || \"0\"\n        if (type.length > 1) {\n          type = tar.types[obj.type]\n          if (!type) type = \"0\"\n        }\n        writeText(block, off, end, type)\n        break\n\n      case \"path\":\n        // uses the \"prefix\" field if > 100 bytes, but <= 255\n        var pathLen = Buffer.byteLength(obj.path)\n          , pathFSize = fieldSize[fields.path]\n          , prefFSize = fieldSize[fields.prefix]\n\n        // paths between 100 and 255 should use the prefix field.\n        // longer than 255\n        if (pathLen > pathFSize &&\n            pathLen <= pathFSize + prefFSize) {\n          // need to find a slash somewhere in the middle so that\n          // path and prefix both fit in their respective fields\n          var searchStart = pathLen - 1 - pathFSize\n            , searchEnd = prefFSize\n            , found = false\n            , pathBuf = new Buffer(obj.path)\n\n          for ( var s = searchStart\n              ; (s <= searchEnd)\n              ; s ++ ) {\n            if (pathBuf[s] === slash || pathBuf[s] === bslash) {\n              found = s\n              break\n            }\n          }\n\n          if (found !== false) {\n            prefix = pathBuf.slice(0, found).toString(\"utf8\")\n            path = pathBuf.slice(found + 1).toString(\"utf8\")\n\n            ret = writeText(block, off, end, path)\n            off = fieldOffs[fields.prefix]\n            end = fieldEnds[fields.prefix]\n            // console.error(\"%% header writing prefix\", off, end, prefix)\n            ret = writeText(block, off, end, prefix) || ret\n            break\n          }\n        }\n\n        // paths less than 100 chars don't need a prefix\n        // and paths longer than 255 need an extended header and will fail\n        // on old implementations no matter what we do here.\n        // Null out the prefix, and fallthrough to default.\n        // console.error(\"%% header writing no prefix\")\n        var poff = fieldOffs[fields.prefix]\n          , pend = fieldEnds[fields.prefix]\n        writeText(block, poff, pend, \"\")\n        // fallthrough\n\n      // all other fields are numeric or text\n      default:\n        ret = numeric[field]\n            ? writeNumeric(block, off, end, obj[field])\n            : writeText(block, off, end, obj[field] || \"\")\n        break\n    }\n    obj.needExtended = obj.needExtended || ret\n  }\n\n  var off = fieldOffs[fields.cksum]\n    , end = fieldEnds[fields.cksum]\n\n  writeNumeric(block, off, end, calcSum.call(this, block))\n\n  return block\n}\n\n// if it's a negative number, or greater than will fit,\n// then use write256.\nvar MAXNUM = { 12: 077777777777\n             , 11: 07777777777\n             , 8 : 07777777\n             , 7 : 0777777 }\nfunction writeNumeric (block, off, end, num) {\n  var writeLen = end - off\n    , maxNum = MAXNUM[writeLen] || 0\n\n  num = num || 0\n  // console.error(\"  numeric\", num)\n\n  if (num instanceof Date ||\n      Object.prototype.toString.call(num) === \"[object Date]\") {\n    num = num.getTime() / 1000\n  }\n\n  if (num > maxNum || num < 0) {\n    write256(block, off, end, num)\n    // need an extended header if negative or too big.\n    return true\n  }\n\n  // god, tar is so annoying\n  // if the string is small enough, you should put a space\n  // between the octal string and the \\0, but if it doesn't\n  // fit, then don't.\n  var numStr = Math.floor(num).toString(8)\n  if (num < MAXNUM[writeLen - 1]) numStr += \" \"\n\n  // pad with \"0\" chars\n  if (numStr.length < writeLen) {\n    numStr = (new Array(writeLen - numStr.length).join(\"0\")) + numStr\n  }\n\n  if (numStr.length !== writeLen - 1) {\n    throw new Error(\"invalid length: \" + JSON.stringify(numStr) + \"\\n\" +\n                    \"expected: \"+writeLen)\n  }\n  block.write(numStr, off, writeLen, \"utf8\")\n  block[end - 1] = 0\n}\n\nfunction write256 (block, off, end, num) {\n  var buf = block.slice(off, end)\n  var positive = num >= 0\n  buf[0] = positive ? 0x80 : 0xFF\n\n  // get the number as a base-256 tuple\n  if (!positive) num *= -1\n  var tuple = []\n  do {\n    var n = num % 256\n    tuple.push(n)\n    num = (num - n) / 256\n  } while (num)\n\n  var bytes = tuple.length\n\n  var fill = buf.length - bytes\n  for (var i = 1; i < fill; i ++) {\n    buf[i] = positive ? 0 : 0xFF\n  }\n\n  // tuple is a base256 number, with [0] as the *least* significant byte\n  // if it's negative, then we need to flip all the bits once we hit the\n  // first non-zero bit.  The 2's-complement is (0x100 - n), and the 1's-\n  // complement is (0xFF - n).\n  var zero = true\n  for (i = bytes; i > 0; i --) {\n    var byte = tuple[bytes - i]\n    if (positive) buf[fill + i] = byte\n    else if (zero && byte === 0) buf[fill + i] = 0\n    else if (zero) {\n      zero = false\n      buf[fill + i] = 0x100 - byte\n    } else buf[fill + i] = 0xFF - byte\n  }\n}\n\nfunction writeText (block, off, end, str) {\n  // strings are written as utf8, then padded with \\0\n  var strLen = Buffer.byteLength(str)\n    , writeLen = Math.min(strLen, end - off)\n    // non-ascii fields need extended headers\n    // long fields get truncated\n    , needExtended = strLen !== str.length || strLen > writeLen\n\n  // write the string, and null-pad\n  if (writeLen > 0) block.write(str, off, writeLen, \"utf8\")\n  for (var i = off + writeLen; i < end; i ++) block[i] = 0\n\n  return needExtended\n}\n\nfunction calcSum (block) {\n  block = block || this.block\n  assert(Buffer.isBuffer(block) && block.length === 512)\n\n  if (!block) throw new Error(\"Need block to checksum\")\n\n  // now figure out what it would be if the cksum was \"        \"\n  var sum = 0\n    , start = fieldOffs[fields.cksum]\n    , end = fieldEnds[fields.cksum]\n\n  for (var i = 0; i < fieldOffs[fields.cksum]; i ++) {\n    sum += block[i]\n  }\n\n  for (var i = start; i < end; i ++) {\n    sum += space\n  }\n\n  for (var i = end; i < 512; i ++) {\n    sum += block[i]\n  }\n\n  return sum\n}\n\n\nfunction checkSum (block) {\n  var sum = calcSum.call(this, block)\n  block = block || this.block\n\n  var cksum = block.slice(fieldOffs[fields.cksum], fieldEnds[fields.cksum])\n  cksum = parseNumeric(cksum)\n\n  return cksum === sum\n}\n\nfunction decode (block) {\n  block = block || this.block\n  assert(Buffer.isBuffer(block) && block.length === 512)\n\n  this.block = block\n  this.cksumValid = this.checkSum()\n\n  var prefix = null\n\n  // slice off each field.\n  for (var f = 0; fields[f] !== null; f ++) {\n    var field = fields[f]\n      , val = block.slice(fieldOffs[f], fieldEnds[f])\n\n    switch (field) {\n      case \"ustar\":\n        // if not ustar, then everything after that is just padding.\n        if (val.toString() !== \"ustar\\0\") {\n          this.ustar = false\n          return\n        } else {\n          // console.error(\"ustar:\", val, val.toString())\n          this.ustar = val.toString()\n        }\n        break\n\n      // prefix is special, since it might signal the xstar header\n      case \"prefix\":\n        var atime = parseNumeric(val.slice(131, 131 + 12))\n          , ctime = parseNumeric(val.slice(131 + 12, 131 + 12 + 12))\n        if ((val[130] === 0 || val[130] === space) &&\n            typeof atime === \"number\" &&\n            typeof ctime === \"number\" &&\n            val[131 + 12] === space &&\n            val[131 + 12 + 12] === space) {\n          this.atime = atime\n          this.ctime = ctime\n          val = val.slice(0, 130)\n        }\n        prefix = val.toString(\"utf8\").replace(/\\0+$/, \"\")\n        // console.error(\"%% header reading prefix\", prefix)\n        break\n\n      // all other fields are null-padding text\n      // or a number.\n      default:\n        if (numeric[field]) {\n          this[field] = parseNumeric(val)\n        } else {\n          this[field] = val.toString(\"utf8\").replace(/\\0+$/, \"\")\n        }\n        break\n    }\n  }\n\n  // if we got a prefix, then prepend it to the path.\n  if (prefix) {\n    this.path = prefix + \"/\" + this.path\n    // console.error(\"%% header got a prefix\", this.path)\n  }\n}\n\nfunction parse256 (buf) {\n  // first byte MUST be either 80 or FF\n  // 80 for positive, FF for 2's comp\n  var positive\n  if (buf[0] === 0x80) positive = true\n  else if (buf[0] === 0xFF) positive = false\n  else return null\n\n  // build up a base-256 tuple from the least sig to the highest\n  var zero = false\n    , tuple = []\n  for (var i = buf.length - 1; i > 0; i --) {\n    var byte = buf[i]\n    if (positive) tuple.push(byte)\n    else if (zero && byte === 0) tuple.push(0)\n    else if (zero) {\n      zero = false\n      tuple.push(0x100 - byte)\n    } else tuple.push(0xFF - byte)\n  }\n\n  for (var sum = 0, i = 0, l = tuple.length; i < l; i ++) {\n    sum += tuple[i] * Math.pow(256, i)\n  }\n\n  return positive ? sum : -1 * sum\n}\n\nfunction parseNumeric (f) {\n  if (f[0] & 0x80) return parse256(f)\n\n  var str = f.toString(\"utf8\").split(\"\\0\")[0].trim()\n    , res = parseInt(str, 8)\n\n  return isNaN(res) ? null : res\n}\n\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/entry.js":"// A passthrough read/write stream that sets its properties\n// based on a header, extendedHeader, and globalHeader\n//\n// Can be either a file system object of some sort, or\n// a pax/ustar metadata entry.\n\nmodule.exports = Entry\n\nvar TarHeader = require(\"./header.js\")\n  , tar = require(\"../tar\")\n  , assert = require(\"assert\").ok\n  , Stream = require(\"stream\").Stream\n  , inherits = require(\"inherits\")\n  , fstream = require(\"fstream\").Abstract\n\nfunction Entry (header, extended, global) {\n  Stream.call(this)\n  this.readable = true\n  this.writable = true\n\n  this._needDrain = false\n  this._paused = false\n  this._reading = false\n  this._ending = false\n  this._ended = false\n  this._remaining = 0\n  this._abort = false\n  this._queue = []\n  this._index = 0\n  this._queueLen = 0\n\n  this._read = this._read.bind(this)\n\n  this.props = {}\n  this._header = header\n  this._extended = extended || {}\n\n  // globals can change throughout the course of\n  // a file parse operation.  Freeze it at its current state.\n  this._global = {}\n  var me = this\n  Object.keys(global || {}).forEach(function (g) {\n    me._global[g] = global[g]\n  })\n\n  this._setProps()\n}\n\ninherits(Entry, Stream)\n\nEntry.prototype.write = function (c) {\n  if (this._ending) this.error(\"write() after end()\", null, true)\n  if (this._remaining === 0) {\n    this.error(\"invalid bytes past eof\")\n  }\n\n  // often we'll get a bunch of \\0 at the end of the last write,\n  // since chunks will always be 512 bytes when reading a tarball.\n  if (c.length > this._remaining) {\n    c = c.slice(0, this._remaining)\n  }\n  this._remaining -= c.length\n\n  // put it on the stack.\n  var ql = this._queueLen\n  this._queue.push(c)\n  this._queueLen ++\n\n  this._read()\n\n  // either paused, or buffered\n  if (this._paused || ql > 0) {\n    this._needDrain = true\n    return false\n  }\n\n  return true\n}\n\nEntry.prototype.end = function (c) {\n  if (c) this.write(c)\n  this._ending = true\n  this._read()\n}\n\nEntry.prototype.pause = function () {\n  this._paused = true\n  this.emit(\"pause\")\n}\n\nEntry.prototype.resume = function () {\n  // console.error(\"    Tar Entry resume\", this.path)\n  this.emit(\"resume\")\n  this._paused = false\n  this._read()\n  return this._queueLen - this._index > 1\n}\n\n  // This is bound to the instance\nEntry.prototype._read = function () {\n  // console.error(\"    Tar Entry _read\", this.path)\n\n  if (this._paused || this._reading || this._ended) return\n\n  // set this flag so that event handlers don't inadvertently\n  // get multiple _read() calls running.\n  this._reading = true\n\n  // have any data to emit?\n  while (this._index < this._queueLen && !this._paused) {\n    var chunk = this._queue[this._index ++]\n    this.emit(\"data\", chunk)\n  }\n\n  // check if we're drained\n  if (this._index >= this._queueLen) {\n    this._queue.length = this._queueLen = this._index = 0\n    if (this._needDrain) {\n      this._needDrain = false\n      this.emit(\"drain\")\n    }\n    if (this._ending) {\n      this._ended = true\n      this.emit(\"end\")\n    }\n  }\n\n  // if the queue gets too big, then pluck off whatever we can.\n  // this should be fairly rare.\n  var mql = this._maxQueueLen\n  if (this._queueLen > mql && this._index > 0) {\n    mql = Math.min(this._index, mql)\n    this._index -= mql\n    this._queueLen -= mql\n    this._queue = this._queue.slice(mql)\n  }\n\n  this._reading = false\n}\n\nEntry.prototype._setProps = function () {\n  // props = extended->global->header->{}\n  var header = this._header\n    , extended = this._extended\n    , global = this._global\n    , props = this.props\n\n  // first get the values from the normal header.\n  var fields = tar.fields\n  for (var f = 0; fields[f] !== null; f ++) {\n    var field = fields[f]\n      , val = header[field]\n    if (typeof val !== \"undefined\") props[field] = val\n  }\n\n  // next, the global header for this file.\n  // numeric values, etc, will have already been parsed.\n  ;[global, extended].forEach(function (p) {\n    Object.keys(p).forEach(function (f) {\n      if (typeof p[f] !== \"undefined\") props[f] = p[f]\n    })\n  })\n\n  // no nulls allowed in path or linkpath\n  ;[\"path\", \"linkpath\"].forEach(function (p) {\n    if (props.hasOwnProperty(p)) {\n      props[p] = props[p].split(\"\\0\")[0]\n    }\n  })\n\n\n  // set date fields to be a proper date\n  ;[\"mtime\", \"ctime\", \"atime\"].forEach(function (p) {\n    if (props.hasOwnProperty(p)) {\n      props[p] = new Date(props[p] * 1000)\n    }\n  })\n\n  // set the type so that we know what kind of file to create\n  var type\n  switch (tar.types[props.type]) {\n    case \"OldFile\":\n    case \"ContiguousFile\":\n      type = \"File\"\n      break\n\n    case \"GNUDumpDir\":\n      type = \"Directory\"\n      break\n\n    case undefined:\n      type = \"Unknown\"\n      break\n\n    case \"Link\":\n    case \"SymbolicLink\":\n    case \"CharacterDevice\":\n    case \"BlockDevice\":\n    case \"Directory\":\n    case \"FIFO\":\n    default:\n      type = tar.types[props.type]\n  }\n\n  this.type = type\n  this.path = props.path\n  this.size = props.size\n\n  // size is special, since it signals when the file needs to end.\n  this._remaining = props.size\n}\n\n// the parser may not call write if _abort is true. \n// useful for skipping data from some files quickly.\nEntry.prototype.abort = function(){\n  this._abort = true\n}\n\nEntry.prototype.warn = fstream.warn\nEntry.prototype.error = fstream.error\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/global-header-writer.js":"module.exports = GlobalHeaderWriter\n\nvar ExtendedHeaderWriter = require(\"./extended-header-writer.js\")\n  , inherits = require(\"inherits\")\n\ninherits(GlobalHeaderWriter, ExtendedHeaderWriter)\n\nfunction GlobalHeaderWriter (props) {\n  if (!(this instanceof GlobalHeaderWriter)) {\n    return new GlobalHeaderWriter(props)\n  }\n  ExtendedHeaderWriter.call(this, props)\n  this.props.type = \"g\"\n}\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/extended-header-writer.js":"\nmodule.exports = ExtendedHeaderWriter\n\nvar inherits = require(\"inherits\")\n  , EntryWriter = require(\"./entry-writer.js\")\n\ninherits(ExtendedHeaderWriter, EntryWriter)\n\nvar tar = require(\"../tar.js\")\n  , path = require(\"path\")\n  , TarHeader = require(\"./header.js\")\n\n// props is the props of the thing we need to write an\n// extended header for.\n// Don't be shy with it.  Just encode everything.\nfunction ExtendedHeaderWriter (props) {\n  // console.error(\">> ehw ctor\")\n  var me = this\n\n  if (!(me instanceof ExtendedHeaderWriter)) {\n    return new ExtendedHeaderWriter(props)\n  }\n\n  me.fields = props\n\n  var p =\n    { path : (\"PaxHeader\" + path.join(\"/\", props.path || \"\"))\n             .replace(/\\\\/g, \"/\").substr(0, 100)\n    , mode : props.mode || 0666\n    , uid : props.uid || 0\n    , gid : props.gid || 0\n    , size : 0 // will be set later\n    , mtime : props.mtime || Date.now() / 1000\n    , type : \"x\"\n    , linkpath : \"\"\n    , ustar : \"ustar\\0\"\n    , ustarver : \"00\"\n    , uname : props.uname || \"\"\n    , gname : props.gname || \"\"\n    , devmaj : props.devmaj || 0\n    , devmin : props.devmin || 0\n    }\n\n\n  EntryWriter.call(me, p)\n  // console.error(\">> ehw props\", me.props)\n  me.props = p\n\n  me._meta = true\n}\n\nExtendedHeaderWriter.prototype.end = function () {\n  // console.error(\">> ehw end\")\n  var me = this\n\n  if (me._ended) return\n  me._ended = true\n\n  me._encodeFields()\n\n  if (me.props.size === 0) {\n    // nothing to write!\n    me._ready = true\n    me._stream.end()\n    return\n  }\n\n  me._stream.write(TarHeader.encode(me.props))\n  me.body.forEach(function (l) {\n    me._stream.write(l)\n  })\n  me._ready = true\n\n  // console.error(\">> ehw _process calling end()\", me.props)\n  this._stream.end()\n}\n\nExtendedHeaderWriter.prototype._encodeFields = function () {\n  // console.error(\">> ehw _encodeFields\")\n  this.body = []\n  if (this.fields.prefix) {\n    this.fields.path = this.fields.prefix + \"/\" + this.fields.path\n    this.fields.prefix = \"\"\n  }\n  encodeFields(this.fields, \"\", this.body, this.fields.noProprietary)\n  var me = this\n  this.body.forEach(function (l) {\n    me.props.size += l.length\n  })\n}\n\nfunction encodeFields (fields, prefix, body, nop) {\n  // console.error(\">> >> ehw encodeFields\")\n  // \"%d %s=%s\\n\", <length>, <keyword>, <value>\n  // The length is a decimal number, and includes itself and the \\n\n  // Numeric values are decimal strings.\n\n  Object.keys(fields).forEach(function (k) {\n    var val = fields[k]\n      , numeric = tar.numeric[k]\n\n    if (prefix) k = prefix + \".\" + k\n\n    // already including NODETAR.type, don't need File=true also\n    if (k === fields.type && val === true) return\n\n    switch (k) {\n      // don't include anything that's always handled just fine\n      // in the normal header, or only meaningful in the context\n      // of nodetar\n      case \"mode\":\n      case \"cksum\":\n      case \"ustar\":\n      case \"ustarver\":\n      case \"prefix\":\n      case \"basename\":\n      case \"dirname\":\n      case \"needExtended\":\n      case \"block\":\n      case \"filter\":\n        return\n\n      case \"rdev\":\n        if (val === 0) return\n        break\n\n      case \"nlink\":\n      case \"dev\": // Truly a hero among men, Creator of Star!\n      case \"ino\": // Speak his name with reverent awe!  It is:\n        k = \"SCHILY.\" + k\n        break\n\n      default: break\n    }\n\n    if (val && typeof val === \"object\" &&\n        !Buffer.isBuffer(val)) encodeFields(val, k, body, nop)\n    else if (val === null || val === undefined) return\n    else body.push.apply(body, encodeField(k, val, nop))\n  })\n\n  return body\n}\n\nfunction encodeField (k, v, nop) {\n  // lowercase keys must be valid, otherwise prefix with\n  // \"NODETAR.\"\n  if (k.charAt(0) === k.charAt(0).toLowerCase()) {\n    var m = k.split(\".\")[0]\n    if (!tar.knownExtended[m]) k = \"NODETAR.\" + k\n  }\n\n  // no proprietary\n  if (nop && k.charAt(0) !== k.charAt(0).toLowerCase()) {\n    return []\n  }\n\n  if (typeof val === \"number\") val = val.toString(10)\n\n  var s = new Buffer(\" \" + k + \"=\" + v + \"\\n\")\n    , digits = Math.floor(Math.log(s.length) / Math.log(10)) + 1\n\n  // console.error(\"1 s=%j digits=%j s.length=%d\", s.toString(), digits, s.length)\n\n  // if adding that many digits will make it go over that length,\n  // then add one to it. For example, if the string is:\n  // \" foo=bar\\n\"\n  // then that's 9 characters.  With the \"9\", that bumps the length\n  // up to 10.  However, this is invalid:\n  // \"10 foo=bar\\n\"\n  // but, since that's actually 11 characters, since 10 adds another\n  // character to the length, and the length includes the number\n  // itself.  In that case, just bump it up again.\n  if (s.length + digits >= Math.pow(10, digits)) digits += 1\n  // console.error(\"2 s=%j digits=%j s.length=%d\", s.toString(), digits, s.length)\n\n  var len = digits + s.length\n  // console.error(\"3 s=%j digits=%j s.length=%d len=%d\", s.toString(), digits, s.length, len)\n  var lenBuf = new Buffer(\"\" + len)\n  if (lenBuf.length + s.length !== len) {\n    throw new Error(\"Bad length calculation\\n\"+\n                    \"len=\"+len+\"\\n\"+\n                    \"lenBuf=\"+JSON.stringify(lenBuf.toString())+\"\\n\"+\n                    \"lenBuf.length=\"+lenBuf.length+\"\\n\"+\n                    \"digits=\"+digits+\"\\n\"+\n                    \"s=\"+JSON.stringify(s.toString())+\"\\n\"+\n                    \"s.length=\"+s.length)\n  }\n\n  return [lenBuf, s]\n}\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/parse.js":"\n// A writable stream.\n// It emits \"entry\" events, which provide a readable stream that has\n// header info attached.\n\nmodule.exports = Parse.create = Parse\n\nvar stream = require(\"stream\")\n  , Stream = stream.Stream\n  , BlockStream = require(\"block-stream\")\n  , tar = require(\"../tar.js\")\n  , TarHeader = require(\"./header.js\")\n  , Entry = require(\"./entry.js\")\n  , BufferEntry = require(\"./buffer-entry.js\")\n  , ExtendedHeader = require(\"./extended-header.js\")\n  , assert = require(\"assert\").ok\n  , inherits = require(\"inherits\")\n  , fstream = require(\"fstream\")\n\n// reading a tar is a lot like reading a directory\n// However, we're actually not going to run the ctor,\n// since it does a stat and various other stuff.\n// This inheritance gives us the pause/resume/pipe\n// behavior that is desired.\ninherits(Parse, fstream.Reader)\n\nfunction Parse () {\n  var me = this\n  if (!(me instanceof Parse)) return new Parse()\n\n  // doesn't apply fstream.Reader ctor?\n  // no, becasue we don't want to stat/etc, we just\n  // want to get the entry/add logic from .pipe()\n  Stream.apply(me)\n\n  me.writable = true\n  me.readable = true\n  me._stream = new BlockStream(512)\n  me.position = 0\n  me._ended = false\n\n  me._stream.on(\"error\", function (e) {\n    me.emit(\"error\", e)\n  })\n\n  me._stream.on(\"data\", function (c) {\n    me._process(c)\n  })\n\n  me._stream.on(\"end\", function () {\n    me._streamEnd()\n  })\n\n  me._stream.on(\"drain\", function () {\n    me.emit(\"drain\")\n  })\n}\n\n// overridden in Extract class, since it needs to\n// wait for its DirWriter part to finish before\n// emitting \"end\"\nParse.prototype._streamEnd = function () {\n  var me = this\n  if (!me._ended || me._entry) me.error(\"unexpected eof\")\n  me.emit(\"end\")\n}\n\n// a tar reader is actually a filter, not just a readable stream.\n// So, you should pipe a tarball stream into it, and it needs these\n// write/end methods to do that.\nParse.prototype.write = function (c) {\n  if (this._ended) {\n    // gnutar puts a LOT of nulls at the end.\n    // you can keep writing these things forever.\n    // Just ignore them.\n    for (var i = 0, l = c.length; i > l; i ++) {\n      if (c[i] !== 0) return this.error(\"write() after end()\")\n    }\n    return\n  }\n  return this._stream.write(c)\n}\n\nParse.prototype.end = function (c) {\n  this._ended = true\n  return this._stream.end(c)\n}\n\n// don't need to do anything, since we're just\n// proxying the data up from the _stream.\n// Just need to override the parent's \"Not Implemented\"\n// error-thrower.\nParse.prototype._read = function () {}\n\nParse.prototype._process = function (c) {\n  assert(c && c.length === 512, \"block size should be 512\")\n\n  // one of three cases.\n  // 1. A new header\n  // 2. A part of a file/extended header\n  // 3. One of two or more EOF null blocks\n\n  if (this._entry) {\n    var entry = this._entry\n    if(!entry._abort) entry.write(c)\n    else {\n      entry._remaining -= c.length\n      if(entry._remaining < 0) entry._remaining = 0\n    }\n    if (entry._remaining === 0) {\n      entry.end()\n      this._entry = null\n    }\n  } else {\n    // either zeroes or a header\n    var zero = true\n    for (var i = 0; i < 512 && zero; i ++) {\n      zero = c[i] === 0\n    }\n\n    // eof is *at least* 2 blocks of nulls, and then the end of the\n    // file.  you can put blocks of nulls between entries anywhere,\n    // so appending one tarball to another is technically valid.\n    // ending without the eof null blocks is not allowed, however.\n    if (zero) {\n      if (this._eofStarted)\n        this._ended = true\n      this._eofStarted = true\n    } else {\n      this._eofStarted = false\n      this._startEntry(c)\n    }\n  }\n\n  this.position += 512\n}\n\n// take a header chunk, start the right kind of entry.\nParse.prototype._startEntry = function (c) {\n  var header = new TarHeader(c)\n    , self = this\n    , entry\n    , ev\n    , EntryType\n    , onend\n    , meta = false\n\n  if (null === header.size || !header.cksumValid) {\n    var e = new Error(\"invalid tar file\")\n    e.header = header\n    e.tar_file_offset = this.position\n    e.tar_block = this.position / 512\n    return this.emit(\"error\", e)\n  }\n\n  switch (tar.types[header.type]) {\n    case \"File\":\n    case \"OldFile\":\n    case \"Link\":\n    case \"SymbolicLink\":\n    case \"CharacterDevice\":\n    case \"BlockDevice\":\n    case \"Directory\":\n    case \"FIFO\":\n    case \"ContiguousFile\":\n    case \"GNUDumpDir\":\n      // start a file.\n      // pass in any extended headers\n      // These ones consumers are typically most interested in.\n      EntryType = Entry\n      ev = \"entry\"\n      break\n\n    case \"GlobalExtendedHeader\":\n      // extended headers that apply to the rest of the tarball\n      EntryType = ExtendedHeader\n      onend = function () {\n        self._global = self._global || {}\n        Object.keys(entry.fields).forEach(function (k) {\n          self._global[k] = entry.fields[k]\n        })\n      }\n      ev = \"globalExtendedHeader\"\n      meta = true\n      break\n\n    case \"ExtendedHeader\":\n    case \"OldExtendedHeader\":\n      // extended headers that apply to the next entry\n      EntryType = ExtendedHeader\n      onend = function () {\n        self._extended = entry.fields\n      }\n      ev = \"extendedHeader\"\n      meta = true\n      break\n\n    case \"NextFileHasLongLinkpath\":\n      // set linkpath=<contents> in extended header\n      EntryType = BufferEntry\n      onend = function () {\n        self._extended = self._extended || {}\n        self._extended.linkpath = entry.body\n      }\n      ev = \"longLinkpath\"\n      meta = true\n      break\n\n    case \"NextFileHasLongPath\":\n    case \"OldGnuLongPath\":\n      // set path=<contents> in file-extended header\n      EntryType = BufferEntry\n      onend = function () {\n        self._extended = self._extended || {}\n        self._extended.path = entry.body\n      }\n      ev = \"longPath\"\n      meta = true\n      break\n\n    default:\n      // all the rest we skip, but still set the _entry\n      // member, so that we can skip over their data appropriately.\n      // emit an event to say that this is an ignored entry type?\n      EntryType = Entry\n      ev = \"ignoredEntry\"\n      break\n  }\n\n  var global, extended\n  if (meta) {\n    global = extended = null\n  } else {\n    var global = this._global\n    var extended = this._extended\n\n    // extendedHeader only applies to one entry, so once we start\n    // an entry, it's over.\n    this._extended = null\n  }\n  entry = new EntryType(header, extended, global)\n  entry.meta = meta\n\n  // only proxy data events of normal files.\n  if (!meta) {\n    entry.on(\"data\", function (c) {\n      me.emit(\"data\", c)\n    })\n  }\n\n  if (onend) entry.on(\"end\", onend)\n\n  this._entry = entry\n  var me = this\n\n  entry.on(\"pause\", function () {\n    me.pause()\n  })\n\n  entry.on(\"resume\", function () {\n    me.resume()\n  })\n\n  if (this.listeners(\"*\").length) {\n    this.emit(\"*\", ev, entry)\n  }\n\n  this.emit(ev, entry)\n\n  // Zero-byte entry.  End immediately.\n  if (entry.props.size === 0) {\n    entry.end()\n    this._entry = null\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/buffer-entry.js":"// just like the Entry class, but it buffers the contents\n//\n// XXX It would be good to set a maximum BufferEntry filesize,\n// since it eats up memory.  In normal operation,\n// these are only for long filenames or link names, which are\n// rarely very big.\n\nmodule.exports = BufferEntry\n\nvar inherits = require(\"inherits\")\n  , Entry = require(\"./entry.js\")\n\nfunction BufferEntry () {\n  Entry.apply(this, arguments)\n  this._buffer = new Buffer(this.props.size)\n  this._offset = 0\n  this.body = \"\"\n  this.on(\"end\", function () {\n    this.body = this._buffer.toString().slice(0, -1)\n  })\n}\n\ninherits(BufferEntry, Entry)\n\n// collect the bytes as they come in.\nBufferEntry.prototype.write = function (c) {\n  c.copy(this._buffer, this._offset)\n  this._offset += c.length\n  Entry.prototype.write.call(this, c)\n}\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/extended-header.js":"// An Entry consisting of:\n//\n// \"%d %s=%s\\n\", <length>, <keyword>, <value>\n//\n// The length is a decimal number, and includes itself and the \\n\n// \\0 does not terminate anything.  Only the length terminates the string.\n// Numeric values are decimal strings.\n\nmodule.exports = ExtendedHeader\n\nvar Entry = require(\"./entry.js\")\n  , inherits = require(\"inherits\")\n  , tar = require(\"../tar.js\")\n  , numeric = tar.numeric\n  , keyTrans = { \"SCHILY.dev\": \"dev\"\n               , \"SCHILY.ino\": \"ino\"\n               , \"SCHILY.nlink\": \"nlink\" }\n\nfunction ExtendedHeader () {\n  Entry.apply(this, arguments)\n  this.on(\"data\", this._parse)\n  this.fields = {}\n  this._position = 0\n  this._fieldPos = 0\n  this._state = SIZE\n  this._sizeBuf = []\n  this._keyBuf = []\n  this._valBuf = []\n  this._size = -1\n  this._key = \"\"\n}\n\ninherits(ExtendedHeader, Entry)\nExtendedHeader.prototype._parse = parse\n\nvar s = 0\n  , states = ExtendedHeader.states = {}\n  , SIZE = states.SIZE = s++\n  , KEY  = states.KEY  = s++\n  , VAL  = states.VAL  = s++\n  , ERR  = states.ERR  = s++\n\nObject.keys(states).forEach(function (s) {\n  states[states[s]] = states[s]\n})\n\nstates[s] = null\n\n// char code values for comparison\nvar _0 = \"0\".charCodeAt(0)\n  , _9 = \"9\".charCodeAt(0)\n  , point = \".\".charCodeAt(0)\n  , a = \"a\".charCodeAt(0)\n  , Z = \"Z\".charCodeAt(0)\n  , a = \"a\".charCodeAt(0)\n  , z = \"z\".charCodeAt(0)\n  , space = \" \".charCodeAt(0)\n  , eq = \"=\".charCodeAt(0)\n  , cr = \"\\n\".charCodeAt(0)\n\nfunction parse (c) {\n  if (this._state === ERR) return\n\n  for ( var i = 0, l = c.length\n      ; i < l\n      ; this._position++, this._fieldPos++, i++) {\n    // console.error(\"top of loop, size=\"+this._size)\n\n    var b = c[i]\n\n    if (this._size >= 0 && this._fieldPos > this._size) {\n      error(this, \"field exceeds length=\"+this._size)\n      return\n    }\n\n    switch (this._state) {\n      case ERR: return\n\n      case SIZE:\n        // console.error(\"parsing size, b=%d, rest=%j\", b, c.slice(i).toString())\n        if (b === space) {\n          this._state = KEY\n          // this._fieldPos = this._sizeBuf.length\n          this._size = parseInt(new Buffer(this._sizeBuf).toString(), 10)\n          this._sizeBuf.length = 0\n          continue\n        }\n        if (b < _0 || b > _9) {\n          error(this, \"expected [\" + _0 + \"..\" + _9 + \"], got \" + b)\n          return\n        }\n        this._sizeBuf.push(b)\n        continue\n\n      case KEY:\n        // can be any char except =, not > size.\n        if (b === eq) {\n          this._state = VAL\n          this._key = new Buffer(this._keyBuf).toString()\n          if (keyTrans[this._key]) this._key = keyTrans[this._key]\n          this._keyBuf.length = 0\n          continue\n        }\n        this._keyBuf.push(b)\n        continue\n\n      case VAL:\n        // field must end with cr\n        if (this._fieldPos === this._size - 1) {\n          // console.error(\"finished with \"+this._key)\n          if (b !== cr) {\n            error(this, \"expected \\\\n at end of field\")\n            return\n          }\n          var val = new Buffer(this._valBuf).toString()\n          if (numeric[this._key]) {\n            val = parseFloat(val)\n          }\n          this.fields[this._key] = val\n\n          this._valBuf.length = 0\n          this._state = SIZE\n          this._size = -1\n          this._fieldPos = -1\n          continue\n        }\n        this._valBuf.push(b)\n        continue\n    }\n  }\n}\n\nfunction error (me, msg) {\n  msg = \"invalid header: \" + msg\n      + \"\\nposition=\" + me._position\n      + \"\\nfield position=\" + me._fieldPos\n\n  me.error(msg)\n  me.state = ERR\n}\n","/home/travis/build/npmtest/node-npmtest-tar/node_modules/tar/lib/extract.js":"// give it a tarball and a path, and it'll dump the contents\n\nmodule.exports = Extract\n\nvar tar = require(\"../tar.js\")\n  , fstream = require(\"fstream\")\n  , inherits = require(\"inherits\")\n  , path = require(\"path\")\n\nfunction Extract (opts) {\n  if (!(this instanceof Extract)) return new Extract(opts)\n  tar.Parse.apply(this)\n\n  if (typeof opts !== \"object\") {\n    opts = { path: opts }\n  }\n\n  // better to drop in cwd? seems more standard.\n  opts.path = opts.path || path.resolve(\"node-tar-extract\")\n  opts.type = \"Directory\"\n  opts.Directory = true\n\n  // similar to --strip or --strip-components\n  opts.strip = +opts.strip\n  if (!opts.strip || opts.strip <= 0) opts.strip = 0\n\n  this._fst = fstream.Writer(opts)\n\n  this.pause()\n  var me = this\n\n  // Hardlinks in tarballs are relative to the root\n  // of the tarball.  So, they need to be resolved against\n  // the target directory in order to be created properly.\n  me.on(\"entry\", function (entry) {\n    // if there's a \"strip\" argument, then strip off that many\n    // path components.\n    if (opts.strip) {\n      var p = entry.path.split(\"/\").slice(opts.strip).join(\"/\")\n      entry.path = entry.props.path = p\n      if (entry.linkpath) {\n        var lp = entry.linkpath.split(\"/\").slice(opts.strip).join(\"/\")\n        entry.linkpath = entry.props.linkpath = lp\n      }\n    }\n    if (entry.type === \"Link\") {\n      entry.linkpath = entry.props.linkpath =\n        path.join(opts.path, path.join(\"/\", entry.props.linkpath))\n    }\n\n    if (entry.type === \"SymbolicLink\") {\n      var dn = path.dirname(entry.path) || \"\"\n      var linkpath = entry.props.linkpath\n      var target = path.resolve(opts.path, dn, linkpath)\n      if (target.indexOf(opts.path) !== 0) {\n        linkpath = path.join(opts.path, path.join(\"/\", linkpath))\n      }\n      entry.linkpath = entry.props.linkpath = linkpath\n    }\n  })\n\n  this._fst.on(\"ready\", function () {\n    me.pipe(me._fst, { end: false })\n    me.resume()\n  })\n\n  this._fst.on('error', function(err) {\n    me.emit('error', err)\n  })\n\n  this._fst.on('drain', function() {\n    me.emit('drain')\n  })\n\n  // this._fst.on(\"end\", function () {\n  //   console.error(\"\\nEEEE Extract End\", me._fst.path)\n  // })\n\n  this._fst.on(\"close\", function () {\n    // console.error(\"\\nEEEE Extract End\", me._fst.path)\n    me.emit(\"finish\")\n    me.emit(\"end\")\n    me.emit(\"close\")\n  })\n}\n\ninherits(Extract, tar.Parse)\n\nExtract.prototype._streamEnd = function () {\n  var me = this\n  if (!me._ended || me._entry) me.error(\"unexpected eof\")\n  me._fst.end()\n  // my .end() is coming later.\n}\n"}